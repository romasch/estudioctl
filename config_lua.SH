case $CONFIG in
'')
	if test -f config.sh; then TOP=.;
	elif test -f ../config.sh; then TOP=..;
	elif test -f ../../config.sh; then TOP=../..;
	elif test -f ../../../config.sh; then TOP=../../..;
	elif test -f ../../../../config.sh; then TOP=../../../..;
	else
		echo "Can't find config.sh."; exit 1
	fi
	. $TOP/config.sh
	;;
esac
case "$0" in
*/*) cd `expr X$0 : 'X\(.*\)/'` ;;
esac
echo "Extracting src/config.lua (with variable substitutions)"
$spitshell >config.lua<<!GROK!THIS!
	-- Automatically generated Lua build system configuration. Do not edit manually.

	-- Define compiler options.
ccflags = "$ccflags"
mtccflags = "$mtccflags"
warning_level = "$warning_level"

optimize = "$optimize"

	-- Define linker options.
	-- TODO: This system only works on non-Windows systems.

-- Removes unnecessary options which are generated by premake
-- itself using the options StaticLib or SharedLib.
function remove_options (a_string)
	local l_result = string.gsub (a_string, "-o ", "")
	l_result = string.gsub (l_result, "-shared ", "")
	return l_result
end

ldflags = remove_options ("$ldflags $libs")
mtldflags = remove_options ("$mtldflags $mtlibs")

ldsharedflags = remove_options ("$ldsharedflags $sharedlibs")
mtldsharedflags = remove_options ("$mtldsharedflags $mtsharedlibs")

	-- Define linker options for executable files.
	-- Currently needed for x2c, runtime_validation and ecdbgd.
ccldflags = "$ccldflags"

function print_all ()
	print ("Compiler flags:")
	print ("ccflags:" .. ccflags)
	print ("mtccflags:" .. mtccflags)
	print ("warning_level: " .. warning_level)
	print ("optimize: " .. optimize)

	print ("Linker flags:")
	print ("ldflags: " .. ldflags)
	print ("mtldflags: " .. mtldflags)
	print ("ldsharedflags: " .. ldsharedflags)
	print ("mtldsharedflags: " .. mtldsharedflags)
	print ("ccldflags" .. ccldflags)
end

--print_all()

!GROK!THIS!
